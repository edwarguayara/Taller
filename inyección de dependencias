En Informática, Inyección de Dependencias (en inglés Dependency Injection, DI) 
es un patrón de diseño orientado a objetos, en el que se suministran 
objetos a una clase en lugar de ser la propia clase quien cree el objeto.
El término fue acuñado por primera vez por Martin Fowler.

Historia

En los comienzos de la programación, los programas eran lineales y monolíticos.
El flujo de ejecución era simple y predecible, ejecutándose línea tras línea.
Aparecieron dos conceptos para estructurar el código: la modularidad y la reutilización 
de los componentes: se crean bibliotecas de componentes reutilizables. El flujo se complica,
saltando de componente a componente, y aparece un nuevo problema: la dependencia (acoplamiento)
entre los componentes.

El problema de la dependencia se empieza a considerar lo suficientemente importante 
como para definir nuevos conceptos en el diseño :
Inversión de control (IoC, por sus siglas en inglés)
Inyección de Dependencias (Dependency Injection, DI) 
que es una forma de inversión de control.

Implementación del patrón en Java

La forma habitual de implementar este patrón es mediante un "Contenedor DI" y objetos planos o simples
por ejemplo los llamados POJO en java. El contenedor inyecta a cada objeto los objetos necesarios según
las relaciones plasmadas en un fichero de configuración.
Típicamente este contenedor es implementado por un framework externo a la aplicación 
(como Spring o uno propietario), por lo cual en la aplicación también se utilizará inversión de control 
al ser el contenedor (almacenado en una biblioteca) quien invoque el código de la aplicación.
Ésta es la razón por la que los términos de inversión de control e inyección de dependencias se confunden 
habitualmente entre sí.

Ilustración de código usando Java

El siguiente ejemplo muestra una implementación sin inyección de dependencias:

public class Vehiculo {
 
    private Motor motor = new Motor();
 
    /** @retorna la velocidad del vehículo*/
    public Double enAceleracionDePedal(int presionDePedal) {
        motor.setPresionDePedal(presionDePedal);
        int torque = motor.getTorque();
        Double velocidad = ... //realiza el cálculo
        return velocidad;
    }
 
}
 
//se omite la clase Motor ya que no es relevante para este ejemplo
